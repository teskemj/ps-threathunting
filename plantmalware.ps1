<#
.SYNOPSIS
    Fake Fileless Malware IOC Generator for Testing
.DESCRIPTION
    Simulates fileless malware artifacts on a Windows Server 2019 Domain Controller to generate IOCs
    for testing detection scripts. Creates benign Registry entries, scheduled tasks, PowerShell logs,
    and ADS with dummy payloads. Includes cleanup functionality to remove all artifacts.
    FOR LAB USE ONLY IN A CONTROLLED ENVIRONMENT.
.AUTHOR
    Grok 3 (xAI)
.DATE
    May 13, 2025
.USAGE
    .\Plant-FakeFilelessMalware.ps1 [-Path "C:\TestFolder"] [-Action "Plant"] [-Verbose]
    .\Plant-FakeFilelessMalware.ps1 -Action "Cleanup"
    Run with Domain Admin privileges on a Windows Server 2019 Domain Controller.
.PARAMETERS
    -Path: Directory to create test files and ADS (default: C:\TestFolder).
    -Action: "Plant" to create IOCs, "Cleanup" to remove them (default: Plant).
    -Verbose: Enable detailed output.
.WARNING
    FOR LAB USE ONLY. Do not run in production. May trigger security alerts.
#>

param (
    [Parameter(Mandatory=$false)]
    [string]$Path = "C:\TestFolder",
    [Parameter(Mandatory=$false)]
    [ValidateSet("Plant", "Cleanup")]
    [string]$Action = "Plant"
    #[Parameter(Mandatory=$false)]
    #[switch]$Verbose
)

# Function to log messages
function Write-Log {
    param ($Message)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] $Message"
    if ($Verbose) { Write-Verbose $Message }
}

# Function to check for admin privileges
function Test-AdminPrivileges {
    $isAdmin = ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
    if (-not $isAdmin) {
        Write-Log "ERROR: Script requires Domain Admin privileges. Run as Administrator."
        exit 1
    }
}

# Function to verify Windows Server 2019 Domain Controller
function Test-Server2019DC {
    $os = (Get-CimInstance -ClassName Win32_OperatingSystem).Caption
    $isDC = (Get-WmiObject -Class Win32_ComputerSystem).DomainRole -eq 5
    if ($os -notlike "*Windows Server 2019*" -or -not $isDC) {
        Write-Log "WARNING: Script is designed for Windows Server 2019 Domain Controller. Detected: $os, DC: $isDC"
    }
}

# Function to plant fake IOCs
function Plant-IOCs {
    Write-Log "Planting fake fileless malware IOCs..."

    # Create test directory
    if (-not (Test-Path $Path)) {
        New-Item -Path $Path -ItemType Directory -Force | Out-Null
        Write-Log "Created test directory: $Path"
    }

    # 1. Simulate PowerShell execution (generates event logs)
    Write-Log "Simulating suspicious PowerShell execution..."
    $fakeScript = @"
# FAKE MALWARE TEST - NO HARMFUL CODE
Write-Output 'TEST: Simulated fileless malware execution - $(Get-Date)'
# Mimic suspicious behavior (base64-encoded command)
`$encoded = [Convert]::ToBase64String([Text.Encoding]::Unicode.GetBytes('Write-Output \"TEST: Fake payload\"'))
Invoke-Expression (powershell -EncodedCommand `$encoded)
"@
    try_blk {
        # Execute to generate logs (requires Script Block Logging enabled)
        Invoke-Expression $fakeScript
        Write-Log "Generated PowerShell event log (check Event ID 4104)"
    } catch {
        Write-Log "ERROR: Failed to execute fake PowerShell script: $_"
    }

    # 2. Create Registry persistence
    Write-Log "Creating fake Registry persistence..."
    $regPath = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Run"
    $regName = "FakeMalwareTest"
    $regValue = "powershell.exe -NoProfile -WindowStyle Hidden -Command `"Write-Output 'TEST: Fake malware persistence - $(Get-Date)'`""
    try {
        New-ItemProperty -Path $regPath -Name $regName -Value $regValue -PropertyType String -Force | Out-Null
        Write-Log "Added Registry key: $regPath\$regName"
    } catch {
        Write-Log "ERROR: Failed to create Registry key: $_"
    }

    # 3. Create scheduled task
    Write-Log "Creating fake scheduled task..."
    $taskName = "FakeMalwareTask"
    $taskAction = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-NoProfile -WindowStyle Hidden -Command `"Write-Output 'TEST: Fake scheduled task - $(Get-Date)'`""
    $taskTrigger = New-ScheduledTaskTrigger -Daily -At "12:00AM"
    try {
        Register-ScheduledTask -TaskName $taskName -Action $taskAction -Trigger $taskTrigger -Description "TEST: Fake malware task" -Force | Out-Null
        Write-Log "Created scheduled task: $taskName"
    } catch {
        Write-Log "ERROR: Failed to create scheduled task: $_"
    }

    # 4. Create ADS with fake payload
    Write-Log "Creating fake ADS..."
    $testFile = Join-Path $Path "testfile.txt"
    $adsName = "FakeMalwareStream"
    $adsContent = "# FAKE MALWARE TEST - NO HARMFUL CODE`nWrite-Output 'TEST: Simulated ADS payload - $(Get-Date)'"
    try {
        # Create a dummy file
        Set-Content -Path $testFile -Value "This is a test file for ADS simulation."
        # Add ADS
        Set-Content -Path "$testFile`:$adsName" -Value $adsContent
        Write-Log "Created ADS: $testFile`:$adsName"
    } catch {
        Write-Log "ERROR: Failed to create ADS: $_"
    }

    Write-Log "Fake IOCs planted successfully."
    Write-Log "Run detection scripts to identify artifacts."
    Write-Log "To remove artifacts, run: .\Plant-FakeFilelessMalware.ps1 -Action Cleanup"
}

# Function to clean up IOCs
function Cleanup-IOCs {
    Write-Log "Cleaning up fake fileless malware IOCs..."

    # Remove test directory and ADS
    if (Test-Path $Path) {
        try {
            Remove-Item -Path $Path -Recurse -Force
            Write-Log "Removed test directory: $Path"
        } catch {
            Write-Log "ERROR: Failed to remove directory: $_"
        }
    }

    # Remove Registry key
    $regPath = "HKLM:\Software\Microsoft\Windows\CurrentVersion\Run"
    $regName = "FakeMalwareTest"
    if (Test-Path "$regPath\$regName") {
        try {
            Remove-ItemProperty -Path $regPath -Name $regName
            Write-Log "Removed Registry key: $regPath\$regName"
        } catch {
            Write-Log "ERROR: Failed to remove Registry key: $_"
        }
    }

    # Remove scheduled task
    $taskName = "FakeMalwareTask"
    if (Get-ScheduledTask -TaskName $taskName -ErrorAction SilentlyContinue) {
        try {
            Unregister-ScheduledTask -TaskName $taskName -Confirm:$false
            Write-Log "Removed scheduled task: $taskName"
        } catch {
            Write-Log "ERROR: Failed to remove scheduled task: $_"
        }
    }

    Write-Log "Cleanup completed. No test artifacts remain."
}

# Main execution
Write-Log "Starting Fake Fileless Malware IOC Generator..."

# Verify environment
Test-AdminPrivileges
Test-Server2019DC

# Execute based on action
switch ($Action) {
    "Plant" {
        Plant-IOCs
    }
    "Cleanup" {
        Cleanup-IOCs
    }
    default {
        Write-Log "ERROR: Invalid action specified. Use -Action Plant or -Action Cleanup."
        exit 1
    }
}

Write-Log "Script execution completed."