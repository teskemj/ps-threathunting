# This script is designed to demonstrate various PowerShell commands and techniques for detecting fileless malware 
# Get suspicious powershell processes
Get-Process -Name powershell, pwsh | Select-Object Id, ProcessName, Path, CommandLine

# View PowerShell Operational Logs
Get-WinEvent -LogName "Microsoft-Windows-PowerShell/Operational" -MaxEvents 100 | Where-Object { $_.Id -eq 4104 } | Select-Object TimeCreated, @{Name="ScriptBlock";Expression={$_.Properties[2].Value}}

# Detect In-Memory Processes
# This checks for processes that do not have a file path or where the file path does not exist
Get-Process | Where-Object { $_.Path -eq $null -or -not (Test-Path $_.Path) } | Select-Object Id, ProcessName, ParentProcessId

# Check common Registry persistence keys
$regPaths = @(
    "HKLM:\Software\Microsoft\Windows\CurrentVersion\Run",
    "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run",
    "HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce",
    "HKCU:\Software\Microsoft\Windows\CurrentVersion\RunOnce"
)

foreach ($path in $regPaths) {
    Get-ItemProperty -Path $path -ErrorAction SilentlyContinue | Select-Object *
}


# Check for suspicious scheduled tasks
# This checks for tasks that execute PowerShell or WMIC commands
Get-ScheduledTask | Where-Object { $_.State -eq "Ready" -or $_.State -eq "Running" } | Select-Object TaskName, TaskPath, Actions

# Analyze WMI for Malicious Subscriptions
# This checks for WMI event consumers that may be used for persistence
Get-WmiObject -Namespace root\subscription -Class __EventFilter | Select-Object Name, Query
Get-WmiObject -Namespace root\subscription -Class __EventConsumer | Select-Object Name, @{Name="Command";Expression={$_.CommandLineTemplate}}

# Detect Suspicious File Streams
# This checks for alternate data streams (ADS) in files
Get-ChildItem -Path "C:\labfiles" -Recurse | ForEach-Object { Get-Item -Path $_.FullName -Stream * } | Where-Object { $_.Stream -ne ':$DATA' }